Steps to set up Sequelize and typescript
1. npm install sequelize sequelize-cli typescript ts-node @types/express @types/node @types/sequelize pg express node zod 
2. npm i -g typescript
3. npx tsc --init // to initialize tsconfig.json
4. npx sequelize init 
5. generate the users model using 
    - npm run model:generate UserModel --attributes username:string
    - npm run model:generate TagModel --attributes  name:string
    - npm run model:generate CommentModel --attributes content:string
    - npm run model:generate TaskModel --attributes title:string
    N/B: once its brought the file in .js change to .ts and use the import for es6 module
6. to drop existing tables use npx sequelize-cli db:migrate:undo:all
7. to check the statuus of the migration npx sequelize-cli db:migrate:status

STEPS TO RUN THE PROJECT
1. clone the project from github
2. configure your env file with your own configuration values as seen within the .env.sample file
3. run npm install -- to install all dependencies 
4. compile the project using npm run build
5. run npx sequelize-cli db:migrate:undo:all
6. run npx sequelize-cli db:migrate:status
7. run npx sequelize-cli db:migrate
8. start the project with npm run dev
9. start testing after successful connection



SETTING UP REDIS
1. npm i @types/dotenv @types/redis
2. npm i dotenv redis
3. touch ./redis.client.ts
4. set up the redis configuration in this file path above 
    - brew install redis
    - start server using redis-server
    - to check your password for the configuration use redis-cli CONFIG GET requirepass
    - set up your cinfiguration file without password if none

SETTING UP SWAGGER 
Install npm install swagger-jsdoc swagger-ui-express
    - create a swagger.ts file and set up your configuration 
    - Set up Swagger in your Express application to automatically generate API documentation.


PROJECT OVERVIEW
1. USERS MANAGEMENT 
    Registration and Login: Users can register and log in to the system with JWT authentication. There are two roles: Admin and Regular User. Only Admins can create other Admins.
   - Register User to the db
   - Login User 
   - Get all users from the db
   - Admin Creates Admin User to the db
2. Task Management 
    Users can create tasks, assign tasks to themselves and others, update the status of their task and only admins have the priviledge to update any task's status-
   - Users create tasks
   - Users can assign tasks to themselves
   -  Users can update the status of their tasks and only admins can update any task's status
   - Users can add tags to tasks 
   - Only a user with an admin role can get all tasks
   - Users can apply filters and get all tasks 
3. COMMENTING SYSTEM
    Users can add, edit, and delete comments on tasks. Admins have the ability to delete any comment
   - Users can add comments on tasks
   - Users can edit comments on tasks
   - Users can delete comments on tasks
   - Users can view all comments
4. NOTIFICATION SYSTEM
    Users are notified when they are assigned a task or when the status of a task they are involved in is updated. Implemented socket io for this and saved the information of the notication
5. VALIDATION 
    For validating payloads implemented zod for payloads implemented
